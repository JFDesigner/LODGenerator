#ifndef TRIANGLEV_H_
#define TRIANGLEV_H_
//----------------------------------------------------------------------------------------------------------------------
/// @file TriangleV.h
/// @brief basic triangle face class and vertex class for the LODGenerator
//----------------------------------------------------------------------------------------------------------------------

#include <ngl/Types.h>

#include <vector>
#include <iostream>

#include <ngl/Vec4.h>

class Triangle;
class Vertex;

//----------------------------------------------------------------------------------------------------------------------
/// @brief a struct to hold a vector of Vertex * and Triangle * for passing these values of cloned
///   lodVertex and triVertex to new LOD's
//----------------------------------------------------------------------------------------------------------------------
struct vtxTriData {
  std::vector<Vertex *> vtxData; ///< stores Vertex class data for cloning
  std::vector<Triangle *> triData; ///< stores Triangle class data for cloning
};

//----------------------------------------------------------------------------------------------------------------------
/// @class Vertex "include/TriangleV.h"
/// @brief used to store vertex information for ModelLOD such as adjacent face and verts
/// @author Jonathan Flynn
/// @version 1.0
/// @date 14/05/15 completed a working version of the class
//----------------------------------------------------------------------------------------------------------------------
class Vertex
{

public:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default constructor
  /// @param[in]  _id of the model's vertex number
  //----------------------------------------------------------------------------------------------------------------------
  Vertex( const int _id=0):
    m_id(_id){;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default constructor
  /// @param[in]  _id of the model's vertex number
  //----------------------------------------------------------------------------------------------------------------------
  Vertex( const int _id, const ngl::Vec3 _vert):
    m_vert(_vert),
    m_id(_id){;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief copy ctor
  //----------------------------------------------------------------------------------------------------------------------
  Vertex( const Vertex& _v ):
    m_vert(_v.m_vert),
    m_id(_v.m_id),
    m_cost(_v.m_cost){;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief deconstructor. None of the pointer data stored inside the Vertex class needs deleting unless all data is cleared.
  //----------------------------------------------------------------------------------------------------------------------
  virtual ~Vertex();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief deep copy of the vertex class
  /// @returns Vertex* to a copy of the current Vertex class
  //----------------------------------------------------------------------------------------------------------------------
  virtual Vertex* clone() const {return (new Vertex(*this));}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief check for equality uses FCompare (from Util.h) as float values
  /// @param[in] _v the vertex to check against
  /// @returns true or false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator==( const Vertex& _v )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief not equal check
  /// @param[in] _v the vertex to check against
  /// @returns true of false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator!=( const Vertex& _v )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assignment operator set the current vecrtex to rhs
  /// @param[in] _v the vertex to set
  /// @returns a new vertex
  //----------------------------------------------------------------------------------------------------------------------
  Vertex& operator=( const Vertex& _v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief remove adjacent Triangle to current Vertex
  /// @param[in] pointer to Triangle face
  //----------------------------------------------------------------------------------------------------------------------
  void remAdjFace( Triangle *_t );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief remove adjacent Vertex to current Vertex
  /// @param[in] pointer to Vertex
  //----------------------------------------------------------------------------------------------------------------------
  void remAdjVert( Vertex* _v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief removes _v from neighbour list if _v isn't a neighbour
  /// @param[in] pointer to vertex
  //----------------------------------------------------------------------------------------------------------------------
  void remIfNonNeighbour( Vertex* _v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief add adjacent Traingle to current Vertex
  /// @param[in] pointer to triangle face
  //----------------------------------------------------------------------------------------------------------------------
  void addAdjFace( Triangle* _t);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief add adjacent Vertex to current Vertex
  /// @param[in] pointer to vertex
  //----------------------------------------------------------------------------------------------------------------------
  void addAdjVert( Vertex* _v);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get vertex id
  /// @returns an int being the Vertex ID in the m_verts list
  //----------------------------------------------------------------------------------------------------------------------
  int getID(){ return m_id; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set vertex id
  /// @param[in] _id int to set the id to
  //----------------------------------------------------------------------------------------------------------------------
  void setID(int _id){ m_id = _id; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get the collapse cost for the vertex
  /// @returns a float being the collapse cost value
  //----------------------------------------------------------------------------------------------------------------------
  float getCollapseCost(){return m_cost;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set the collapse cost
  /// @param[in] _cost new value of m_cost
  //----------------------------------------------------------------------------------------------------------------------
  void setCollapseCost(float _cost){ m_cost = _cost;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get the collapse vertex for the m_cost value
  /// @returns a Vertex pointer to the smallest cost collapse vertex
  //----------------------------------------------------------------------------------------------------------------------
  Vertex* getCollapseVertex(){return m_collapseVertex;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set the collapse vertex
  /// @param[in] _v new value of m_collapseVertex
  //----------------------------------------------------------------------------------------------------------------------
  void setCollapseVertex(Vertex* _v){ m_collapseVertex = _v;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief finds out if the vertex has a particular adjacent vertex or not
  /// @param[in] _v the pointer to the vertex to check if it exists adjacent to the vertex
  /// @returns a bool value if the Vertex is adjacent or not
  //----------------------------------------------------------------------------------------------------------------------
  bool hasAdjVert( Vertex *_v);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief finds out if the vertex has a particular adjacent triangle or not
  /// @param[in] _t the pointer to the triangle to check if it exists adjacent to the vertex
  /// @returns a bool value if the Triangle is adjacent or not
  //----------------------------------------------------------------------------------------------------------------------
  bool hasAdjFace( Triangle *_t);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns an iterator to the first element in m_faceAdj
  /// @param[in] _t the pointer to the triangle to check if it exists adjacent to the vertex
  /// @returns Triangle* value if the Triangle is adjacent or the function returns last
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Triangle *>::iterator findAdjFace(Triangle *_t);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief stores the adjacent vertices to the current vertex
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Vertex *> m_vertAdj;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief stores the adjacent faces to the current vertex
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Triangle *> m_faceAdj;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief stores the vertex's position
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_vert;


protected:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief id of the model's vertex number
  //----------------------------------------------------------------------------------------------------------------------
  int m_id;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief value for the lowest amount of change cost to remove this vertex
  //----------------------------------------------------------------------------------------------------------------------
  float m_cost;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the vertex to collapse onto to create the lowest cost, "m_cost"
  //----------------------------------------------------------------------------------------------------------------------
  Vertex* m_collapseVertex;

};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
/// @class Triangle "include/TriangleV.h"
/// @brief used to store face/triangle information for ModelLOD
/// @author Jonathan Flynn
/// @version 1.0
/// @date 14/05/15 completed a working version of the class
//----------------------------------------------------------------------------------------------------------------------


class Triangle
{

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default id constructor
  /// @param[in]  _id id number for the face
  //----------------------------------------------------------------------------------------------------------------------
  Triangle( int _id ):
    m_id(_id){;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default vertex constructor
  /// @param[in]  _v0 vertex zero
  /// @param[in]  _v1 vertex one
  /// @param[in]  _v2 vertex two
  //----------------------------------------------------------------------------------------------------------------------
  Triangle( Vertex *_v0, Vertex *_v1, Vertex *_v2 )
  {
    m_vert.reserve(3);
    m_vert[0]=_v0;
    m_vert[1]=_v1;
    m_vert[2]=_v2;
  }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default id and vertex constructor
  /// @param[in]  _id id number for the face
  /// @param[in]  _v0 vertex zero
  /// @param[in]  _v1 vertex one
  /// @param[in]  _v2 vertex two
  //----------------------------------------------------------------------------------------------------------------------
  Triangle( int _id, Vertex *_v0, Vertex *_v1, Vertex *_v2 )
  {
    m_id = _id;
    m_vert.reserve(3);
    m_vert[0]=_v0;
    m_vert[1]=_v1;
    m_vert[2]=_v2;

  }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief copy ctor
  //----------------------------------------------------------------------------------------------------------------------
  Triangle( const Triangle &_t ):
    m_norm(_t.m_norm),
    m_tex(_t.m_tex),
    m_textureCoord(_t.m_textureCoord),
    m_normals(_t.m_normals),
    m_fNormal(_t.m_fNormal),
    m_id(_t.m_id),
    m_normID(_t.m_normID),
    m_texID(_t.m_texID){;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief deconstructor
  //----------------------------------------------------------------------------------------------------------------------
  virtual ~Triangle();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief deep copy of the Triangle class
  /// @returns Triangle* to a copy of the current Triangle class
  //----------------------------------------------------------------------------------------------------------------------
  virtual Triangle* clone() const {return (new Triangle(*this));}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief check for equality uses FCompare (from Util.h) as float values
  /// @param[in] _v the vertex to check against
  /// @returns true or false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator==( const Triangle &_t )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief not equal check
  /// @param[in] _v the vertex to check against
  /// @returns true of false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator!=(  const Triangle &_t )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assignment operator set the current vecrtex to rhs
  /// @param[in] _v the vertex to set
  /// @returns a new vertex
  //----------------------------------------------------------------------------------------------------------------------
  Triangle& operator =( Triangle &_t );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get Triangle id
  /// @returns an int being the Triangle ID in the m_face list
  //----------------------------------------------------------------------------------------------------------------------
  int getID(){ return m_id; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set Triangle id
  /// @param[in] _id int to set the id to
  //----------------------------------------------------------------------------------------------------------------------
  void setID(int _id){ m_id = _id; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get normal id for the vert
  /// @returns an int being the Traingle ID in the m_face list
  //----------------------------------------------------------------------------------------------------------------------
  int getNormID(int _pos){ return m_normID[_pos]; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set norm id
  /// @param[in] _id int to set the id to
  //----------------------------------------------------------------------------------------------------------------------
  void setNormID(int _id, int _pos);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get tex id
  /// @returns an int being the Traingle ID in the m_face list
  //----------------------------------------------------------------------------------------------------------------------
  int getTexID(int _pos){ return m_texID[_pos]; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set tex id
  /// @param[in] _id int to set the id to
  //----------------------------------------------------------------------------------------------------------------------
  void setTexID(int _id, unsigned int _pos);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief get Triangle normal
  /// @returns a Vec4 containing the vector of the triangle normal
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 getFaceNormal(){ return m_fNormal; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief calculates normal and stores in m_fNormal
  /// @param[in] _verts the m_vertex list for the ModelLODTri class to access the vertex co-ordinates
  //----------------------------------------------------------------------------------------------------------------------
  void calculateNormal();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief finds out if the triangle has a particular vertex or not
  /// @param[in] _v the pointer to the vertex to check if it exists in the triangle
  //----------------------------------------------------------------------------------------------------------------------
  bool hasVert( Vertex *_v);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief updates the face, replacing all of Vertex _u with _v
  /// @param[in] _u the pointer to the vertex you want to replace
  /// @param[in] _v the pointer to the vertex you want to use to replace
  //----------------------------------------------------------------------------------------------------------------------
  void replaceVertex( Vertex *_u, Vertex *_v);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of three Vertex vertices that make up the triangle
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Vertex *> m_vert;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of the three normal values for each vertex in the triangle
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<ngl::Vec3> m_norm;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of the three texture co-ordinate values for each vertex in the triangle
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<ngl::Vec3> m_tex;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief boolean that says if the vertex has texture co-ordinates or not
  //----------------------------------------------------------------------------------------------------------------------
  bool m_textureCoord;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief boolean that is true if the vertex has normals or not
  //----------------------------------------------------------------------------------------------------------------------
  bool m_normals;


protected:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the face normal
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 m_fNormal;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the triangle id
  //----------------------------------------------------------------------------------------------------------------------
  int m_id;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of each normalID for each value in m_norm (respectively)
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<int> m_normID;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of each textureID for each value in m_tex (respectively)
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<int>  m_texID;

};

#endif
//----------------------------------------------------------------------------------------------------------------------

