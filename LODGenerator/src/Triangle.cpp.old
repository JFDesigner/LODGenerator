#include "Triangle.h"
#include "Vertex.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file Triangle.cpp
/// @brief implementation files for Triangle class
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
bool Triangle::operator==( const Triangle &_t)const
{
  return FCompare(_t.m_vert,m_vert);
}

//----------------------------------------------------------------------------------------------------------------------
bool Triangle::operator!=( const Triangle &_t)const
{
  return !FCompare(_t.m_vert,m_vert);
}

//----------------------------------------------------------------------------------------------------------------------
Triangle& Triangle::operator=( const Triangle &_t )
{
  m_vert = _t.m_vert;
  return *this;
}

Triangle::calculateNormal()
{
  // create two vectors v and w from the triangle's points
  vector<int> v[3] = {(m_vert[1].getX() - m_vert[0].getX()),
                      (m_vert[1].getY() - m_vert[0].getY()),
                      (m_vert[1].getZ() - m_vert[0].getZ())};
  vector<int> w[3] = {(m_vert[2].getX() - m_vert[0].getX()),
                      (m_vert[2].getY() - m_vert[0].getY()),
                      (m_vert[2].getZ() - m_vert[0].getZ())};
  // cross product the two vectors
  m_fNormal.m_x = (v[1]*w[2]) - (v[2]*w[1]);
  m_fNormal.m_y = (v[2]*w[0]) - (v[0]*w[2]);
  m_fNormal.m_z = (v[0]*w[1]) - (v[1]*w[0]);
  // if the length is zero, don't normalize
  if (m_fNormal.length() != 0)
    m_fNormal.normalize();
}
