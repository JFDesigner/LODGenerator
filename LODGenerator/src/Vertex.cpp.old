#include "Vertex.h"
#include <algorithm>

//----------------------------------------------------------------------------------------------------------------------
/// @file Vertex.cpp
/// @brief implementation files for Vertex class
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
bool Vertex::operator==( const Vertex &_v )const
{
  return(
            FCompare(_v.m_id,m_id) &&
            FCompare(_v.m_x,m_x) &&
            FCompare(_v.m_y,m_y) &&
            FCompare(_v.m_z,m_z)
        );
}

//----------------------------------------------------------------------------------------------------------------------
bool Vertex::operator!=( const Vertex &_v )const
{
  return(
            !FCompare(_v.m_id,m_id) ||
            !FCompare(_v.m_x,m_x) ||
            !FCompare(_v.m_y,m_y) ||
            !FCompare(_v.m_z,m_z)
        );
}

//----------------------------------------------------------------------------------------------------------------------
Vertex& Vertex::operator=( const Vertex &_v )
{
  m_id = _v.m_id;
  m_x = _v.m_x;
  m_y = _v.m_y;
  m_z = _v.m_z;
  return *this;
}

//----------------------------------------------------------------------------------------------------------------------
void Vertex::remAdjFace( const Triangle* _t)
{
  m_faceAdj.erase(std::remove(m_faceAdj.begin(), m_faceAdj.end(), _t),
                  m_faceAdj.end());
}

//----------------------------------------------------------------------------------------------------------------------
void Vertex::remAdjVert( const Vertex* _v)
{
  m_vertAdj.erase(std::remove(m_vertAdj.begin(), m_vertAdj.end(), _v),
                  m_vertAdj.end());
}

//----------------------------------------------------------------------------------------------------------------------
void Vertex::addAdjFace( const Triangle* _t)
{
  std::vector<Triangle *>::iterator it;
  it = std::find(m_faceAdj.begin(), m_faceAdj.end(), _t);
  if (it == m_faceAdj.end())
    m_faceAdj.push_back(_t);
}
//----------------------------------------------------------------------------------------------------------------------
void Vertex::addAdjVertex( const Vertex* _v)
{
  std::vector<Vertex *>::iterator it;
  it = std::find(m_vertAdj.begin(), m_vertAdj.end(), _v);
  if (it == m_vertAdj.end())
    m_vertAdj.push_back(_v);
}
