#ifndef TRIANGLE_H_
#define TRIANGLE_H_
//----------------------------------------------------------------------------------------------------------------------
/// @file Triangle.h
/// @brief basic triangle face class for use with the LOD generator
//----------------------------------------------------------------------------------------------------------------------

#include <ngl/Types.h>
#include <ngl/Vec4.h>
#include <vector>
#include "Vertex.h"

//----------------------------------------------------------------------------------------------------------------------
/// @class Triangle "include/Triangle.h"
/// @brief used to store face/triangle information for the ModelLOD class and
/// imported model
/// @author Jonathan Flynn
/// @version 0.1
/// @date 06/03/15 protoyped class and functions from initial design
/// @todo change the ctor for the triangle to calculate the face normal
//----------------------------------------------------------------------------------------------------------------------

// pre-declare the vertex class
class Vertex;

class Triangle
{

public:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default constructor
  /// @param[in]  _v0 vertex zero
  /// @param[in]  _v1 vertex one
  /// @param[in]  _v2 vertex two
  //----------------------------------------------------------------------------------------------------------------------
  Triangle( const Vertex *_v0, const Vertex *_v1, const Vertex *_v2 )
  {
    m_vert[0] = _v0;
    m_vert[1] = _v1;
    m_vert[2] = _v2;
  }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief copy ctor
  //----------------------------------------------------------------------------------------------------------------------
  Triangle( const Triangle &_t )
  {
    std::copy(_t.m_vert, _t.m_vert+3, m_vert);
  }

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief check for equality uses FCompare (from Util.h) as float values
  /// @param[in] _v the vertex to check against
  /// @returns true or false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator==( const Triangle &_t )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief not equal check
  /// @param[in] _v the vertex to check against
  /// @returns true of false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator!=(  const Triangle &_t )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assignment operator set the current vecrtex to rhs
  /// @param[in] _v the vertex to set
  /// @returns a new vertex
  //----------------------------------------------------------------------------------------------------------------------
  Triangle& operator =( const Triangle &_t );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief calculates normal and stores in m_fNormal
  //----------------------------------------------------------------------------------------------------------------------
  void calculateNormal( );

protected:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief array of three vertices that make up the triangle
  //----------------------------------------------------------------------------------------------------------------------
  Vertex m_vert[3];
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the face normal
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 m_fNormal;

};

#endif
//----------------------------------------------------------------------------------------------------------------------

